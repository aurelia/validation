{"version":3,"file":"aurelia-validation.js","sources":["../../src/validator.ts","../../src/validate-result.ts","../../src/implementation/rules.ts","../../src/implementation/expression-visitor.ts","../../src/implementation/validation-message-parser.ts","../../src/implementation/validation-messages.ts","../../src/implementation/standard-validator.ts","../../src/validate-trigger.ts","../../src/config.ts","../../src/get-target-dom-element.ts","../../src/property-info.ts","../../src/util.ts","../../src/property-accessor-parser.ts","../../src/validate-event.ts","../../src/validation-controller.ts","../../src/validate-binding-behavior-base.ts","../../src/validate-binding-behavior.ts","../../src/validation-controller-factory.ts","../../src/validation-errors-custom-attribute.ts","../../src/validation-renderer-custom-attribute.ts","../../src/implementation/validation-rules.ts","../../src/aurelia-validation.ts"],"sourcesContent":["import { ValidateResult } from './validate-result';\r\n\r\n/**\r\n * Validates objects and properties.\r\n */\r\nexport abstract class Validator {\r\n  /**\r\n   * Validates the specified property.\r\n   * @param object The object to validate.\r\n   * @param propertyName The name of the property to validate.\r\n   * @param rules Optional. If unspecified, the implementation should lookup the rules for the\r\n   * specified object. This may not be possible for all implementations of this interface.\r\n   */\r\n  public abstract validateProperty(object: any, propertyName: string, rules?: any): Promise<ValidateResult[]>;\r\n\r\n  /**\r\n   * Validates all rules for specified object and it's properties.\r\n   * @param object The object to validate.\r\n   * @param rules Optional. If unspecified, the implementation should lookup the rules for the\r\n   * specified object. This may not be possible for all implementations of this interface.\r\n   */\r\n  public abstract validateObject(object: any, rules?: any): Promise<ValidateResult[]>;\r\n\r\n  /**\r\n   * Determines whether a rule exists in a set of rules.\r\n   * @param rules The rules to search.\r\n   * @parem rule The rule to find.\r\n   */\r\n  public abstract ruleExists(rules: any, rule: any): boolean;\r\n}\r\n","/**\r\n * The result of validating an individual validation rule.\r\n */\r\nexport class ValidateResult {\r\n  private static nextId = 0;\r\n\r\n  /**\r\n   * A number that uniquely identifies the result instance.\r\n   */\r\n  public id: number;\r\n\r\n  /**\r\n   * @param rule The rule associated with the result. Validator implementation specific.\r\n   * @param object The object that was validated.\r\n   * @param propertyName The name of the property that was validated.\r\n   * @param error The error, if the result is a validation error.\r\n   */\r\n  constructor(\r\n    public rule: any,\r\n    public object: any,\r\n    public propertyName: string | number | null,\r\n    public valid: boolean,\r\n    public message: string | null = null\r\n  ) {\r\n    this.id = ValidateResult.nextId++;\r\n  }\r\n\r\n  public toString() {\r\n    return this.valid ? 'Valid.' : this.message;\r\n  }\r\n}\r\n","import { Rule } from './rule';\r\n\r\n/**\r\n * Sets, unsets and retrieves rules on an object or constructor function.\r\n */\r\nexport class Rules {\r\n  /**\r\n   * The name of the property that stores the rules.\r\n   */\r\n  private static key = '__rules__';\r\n\r\n  /**\r\n   * Applies the rules to a target.\r\n   */\r\n  public static set(target: any, rules: Rule<any, any>[][]): void {\r\n    if (target instanceof Function) {\r\n      target = target.prototype;\r\n    }\r\n    Object.defineProperty(\r\n      target,\r\n      Rules.key,\r\n      { enumerable: false, configurable: false, writable: true, value: rules });\r\n  }\r\n\r\n  /**\r\n   * Removes rules from a target.\r\n   */\r\n  public static unset(target: any): void {\r\n    if (target instanceof Function) {\r\n      target = target.prototype;\r\n    }\r\n    target[Rules.key] = null;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the target's rules.\r\n   */\r\n  public static get(target: any): Rule<any, any>[][] | null {\r\n    return target[Rules.key] || null;\r\n  }\r\n}\r\n","import {\r\n  Expression,\r\n  ValueConverter,\r\n  Conditional,\r\n  AccessScope,\r\n  AccessMember,\r\n  AccessKeyed,\r\n  CallMember,\r\n  BindingBehavior,\r\n  Binary,\r\n  LiteralPrimitive,\r\n  LiteralString\r\n} from 'aurelia-binding';\r\n\r\n// tslint:disable:no-empty\r\nexport class ExpressionVisitor {\r\n  public visitChain(chain: any) {\r\n    this.visitArgs(chain.expressions);\r\n  }\r\n\r\n  public visitBindingBehavior(behavior: BindingBehavior) {\r\n    behavior.expression.accept(this);\r\n    this.visitArgs(behavior.args);\r\n  }\r\n\r\n  public visitValueConverter(converter: ValueConverter) {\r\n    converter.expression.accept(this);\r\n    this.visitArgs(converter.args);\r\n  }\r\n\r\n  public visitAssign(assign: any) {\r\n    assign.target.accept(this);\r\n    assign.value.accept(this);\r\n  }\r\n\r\n  public visitConditional(conditional: Conditional) {\r\n    conditional.condition.accept(this);\r\n    conditional.yes.accept(this);\r\n    conditional.no.accept(this);\r\n  }\r\n\r\n  public visitAccessThis(access: any) {\r\n    access.ancestor = access.ancestor;\r\n  }\r\n\r\n  public visitAccessScope(access: AccessScope) {\r\n    access.name = access.name;\r\n  }\r\n\r\n  public visitAccessMember(access: AccessMember) {\r\n    access.object.accept(this);\r\n  }\r\n\r\n  public visitAccessKeyed(access: AccessKeyed) {\r\n    access.object.accept(this);\r\n    access.key.accept(this);\r\n  }\r\n\r\n  public visitCallScope(call: any) {\r\n    this.visitArgs(call.args);\r\n  }\r\n\r\n  public visitCallFunction(call: any) {\r\n    call.func.accept(this);\r\n    this.visitArgs(call.args);\r\n  }\r\n\r\n  public visitCallMember(call: CallMember) {\r\n    call.object.accept(this);\r\n    this.visitArgs(call.args);\r\n  }\r\n\r\n  public visitPrefix(prefix: any) {\r\n    prefix.expression.accept(this);\r\n  }\r\n\r\n  public visitBinary(binary: Binary) {\r\n    binary.left.accept(this);\r\n    binary.right.accept(this);\r\n  }\r\n\r\n  public visitLiteralPrimitive(literal: LiteralPrimitive) {\r\n    literal.value = literal.value;\r\n  }\r\n\r\n  public visitLiteralArray(literal: any) {\r\n    this.visitArgs(literal.elements);\r\n  }\r\n\r\n  public visitLiteralObject(literal: any) {\r\n    this.visitArgs(literal.values);\r\n  }\r\n\r\n  public visitLiteralString(literal: LiteralString) {\r\n    literal.value = literal.value;\r\n  }\r\n\r\n  private visitArgs(args: Expression[]) {\r\n    for (let i = 0; i < args.length; i++) {\r\n      args[i].accept(this);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Expression,\r\n  AccessScope,\r\n  LiteralString,\r\n  Binary,\r\n  Conditional,\r\n  LiteralPrimitive,\r\n  CallMember\r\n} from 'aurelia-binding';\r\nimport { BindingLanguage } from 'aurelia-templating';\r\nimport * as LogManager from 'aurelia-logging';\r\nimport { ExpressionVisitor } from './expression-visitor';\r\n\r\nexport class ValidationMessageParser {\r\n  public static inject = [BindingLanguage];\r\n\r\n  private emptyStringExpression = new LiteralString('');\r\n  private nullExpression = new LiteralPrimitive(null);\r\n  private undefinedExpression = new LiteralPrimitive(undefined);\r\n  private cache: { [message: string]: Expression } = {};\r\n\r\n  constructor(private bindinqLanguage: BindingLanguage) { }\r\n\r\n  public parse(message: string): Expression {\r\n    if (this.cache[message] !== undefined) {\r\n      return this.cache[message];\r\n    }\r\n\r\n    const parts: (Expression | string)[] | null = (this.bindinqLanguage as any).parseInterpolation(null, message);\r\n    if (parts === null) {\r\n      return new LiteralString(message);\r\n    }\r\n    let expression: Expression = new LiteralString(parts[0] as string);\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      expression = new Binary(\r\n        '+',\r\n        expression,\r\n        new Binary(\r\n          '+',\r\n          this.coalesce(parts[i] as Expression),\r\n          new LiteralString(parts[i + 1] as string)\r\n        )\r\n      );\r\n    }\r\n\r\n    MessageExpressionValidator.validate(expression, message);\r\n\r\n    this.cache[message] = expression;\r\n\r\n    return expression;\r\n  }\r\n\r\n  private coalesce(part: Expression): Expression {\r\n    // part === null || part === undefined ? '' : part\r\n    return new Conditional(\r\n      new Binary(\r\n        '||',\r\n        new Binary('===', part, this.nullExpression),\r\n        new Binary('===', part, this.undefinedExpression)\r\n      ),\r\n      this.emptyStringExpression,\r\n      new CallMember(part, 'toString', [])\r\n    );\r\n  }\r\n}\r\n\r\nexport class MessageExpressionValidator extends ExpressionVisitor {\r\n  public static validate(expression: Expression, originalMessage: string) {\r\n    const visitor = new MessageExpressionValidator(originalMessage);\r\n    expression.accept(visitor);\r\n  }\r\n\r\n  constructor(private originalMessage: string) {\r\n    super();\r\n  }\r\n\r\n  public visitAccessScope(access: AccessScope) {\r\n    if (access.ancestor !== 0) {\r\n      throw new Error('$parent is not permitted in validation message expressions.');\r\n    }\r\n    if (['displayName', 'propertyName', 'value', 'object', 'config', 'getDisplayName'].indexOf(access.name) !== -1) {\r\n      LogManager.getLogger('aurelia-validation')\r\n        // tslint:disable-next-line:max-line-length\r\n        .warn(`Did you mean to use \"$${access.name}\" instead of \"${access.name}\" in this validation message template: \"${this.originalMessage}\"?`);\r\n    }\r\n  }\r\n}\r\n","import { Expression } from 'aurelia-binding';\r\nimport { ValidationMessageParser } from './validation-message-parser';\r\n\r\nexport interface ValidationMessages {\r\n  [key: string]: string;\r\n}\r\n\r\n/**\r\n * Dictionary of validation messages. [messageKey]: messageExpression\r\n */\r\nexport const validationMessages: ValidationMessages = {\r\n  /**\r\n   * The default validation message. Used with rules that have no standard message.\r\n   */\r\n  default: `\\${$displayName} is invalid.`,\r\n  required: `\\${$displayName} is required.`,\r\n  matches: `\\${$displayName} is not correctly formatted.`,\r\n  email: `\\${$displayName} is not a valid email.`,\r\n  minLength: `\\${$displayName} must be at least \\${$config.length} character\\${$config.length === 1 ? '' : 's'}.`,\r\n  maxLength: `\\${$displayName} cannot be longer than \\${$config.length} character\\${$config.length === 1 ? '' : 's'}.`,\r\n  minItems: `\\${$displayName} must contain at least \\${$config.count} item\\${$config.count === 1 ? '' : 's'}.`,\r\n  maxItems: `\\${$displayName} cannot contain more than \\${$config.count} item\\${$config.count === 1 ? '' : 's'}.`,\r\n  min: `\\${$displayName} must be at least \\${$config.constraint}.`,\r\n  max: `\\${$displayName} must be at most \\${$config.constraint}.`,\r\n  range: `\\${$displayName} must be between or equal to \\${$config.min} and \\${$config.max}.`,\r\n  between: `\\${$displayName} must be between but not equal to \\${$config.min} and \\${$config.max}.`,\r\n  equals: `\\${$displayName} must be \\${$config.expectedValue}.`,\r\n};\r\n\r\n/**\r\n * Retrieves validation messages and property display names.\r\n */\r\nexport class ValidationMessageProvider {\r\n  public static inject = [ValidationMessageParser];\r\n\r\n  constructor(public parser: ValidationMessageParser) { }\r\n\r\n  /**\r\n   * Returns a message binding expression that corresponds to the key.\r\n   * @param key The message key.\r\n   */\r\n  public getMessage(key: string): Expression {\r\n    let message: string;\r\n    if (key in validationMessages) {\r\n      message = validationMessages[key];\r\n    } else {\r\n      message = validationMessages['default'];\r\n    }\r\n    return this.parser.parse(message);\r\n  }\r\n\r\n  /**\r\n   * Formulates a property display name using the property name and the configured\r\n   * displayName (if provided).\r\n   * Override this with your own custom logic.\r\n   * @param propertyName The property name.\r\n   */\r\n  public getDisplayName(propertyName: string | number, displayName?: string | null | (() => string)): string {\r\n    if (displayName !== null && displayName !== undefined) {\r\n      return (displayName instanceof Function) ? displayName() : displayName as string;\r\n    }\r\n\r\n    // split on upper-case letters.\r\n    const words = propertyName.toString().split(/(?=[A-Z])/).join(' ');\r\n    // capitalize first letter.\r\n    return words.charAt(0).toUpperCase() + words.slice(1);\r\n  }\r\n}\r\n","import { Expression, LookupFunctions } from 'aurelia-binding';\r\nimport { ViewResources } from 'aurelia-templating';\r\nimport { Validator } from '../validator';\r\nimport { ValidateResult } from '../validate-result';\r\nimport { Rule } from './rule';\r\nimport { Rules } from './rules';\r\nimport { ValidationMessageProvider } from './validation-messages';\r\n\r\n/**\r\n * Validates.\r\n * Responsible for validating objects and properties.\r\n */\r\nexport class StandardValidator extends Validator {\r\n  public static inject = [ValidationMessageProvider, ViewResources];\r\n\r\n  private messageProvider: ValidationMessageProvider;\r\n  private lookupFunctions: LookupFunctions;\r\n  private getDisplayName: (propertyName: string) => string;\r\n\r\n  constructor(messageProvider: ValidationMessageProvider, resources: ViewResources) {\r\n    super();\r\n    this.messageProvider = messageProvider;\r\n    this.lookupFunctions = (resources as any).lookupFunctions;\r\n    this.getDisplayName = messageProvider.getDisplayName.bind(messageProvider);\r\n  }\r\n\r\n  /**\r\n   * Validates the specified property.\r\n   * @param object The object to validate.\r\n   * @param propertyName The name of the property to validate.\r\n   * @param rules Optional. If unspecified, the rules will be looked up using the metadata\r\n   * for the object created by ValidationRules....on(class/object)\r\n   */\r\n  public validateProperty(object: any, propertyName: string | number, rules?: any): Promise<ValidateResult[]> {\r\n    return this.validate(object, propertyName, rules || null);\r\n  }\r\n\r\n  /**\r\n   * Validates all rules for specified object and it's properties.\r\n   * @param object The object to validate.\r\n   * @param rules Optional. If unspecified, the rules will be looked up using the metadata\r\n   * for the object created by ValidationRules....on(class/object)\r\n   */\r\n  public validateObject(object: any, rules?: any): Promise<ValidateResult[]> {\r\n    return this.validate(object, null, rules || null);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a rule exists in a set of rules.\r\n   * @param rules The rules to search.\r\n   * @parem rule The rule to find.\r\n   */\r\n  public ruleExists(rules: Rule<any, any>[][], rule: Rule<any, any>): boolean {\r\n    let i = rules.length;\r\n    while (i--) {\r\n      if (rules[i].indexOf(rule) !== -1) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private getMessage(rule: Rule<any, any>, object: any, value: any): string {\r\n    const expression: Expression = rule.message || this.messageProvider.getMessage(rule.messageKey);\r\n    // tslint:disable-next-line:prefer-const\r\n    let { name: propertyName, displayName } = rule.property;\r\n    if (propertyName !== null) {\r\n      displayName = this.messageProvider.getDisplayName(propertyName, displayName);\r\n    }\r\n    const overrideContext: any = {\r\n      $displayName: displayName,\r\n      $propertyName: propertyName,\r\n      $value: value,\r\n      $object: object,\r\n      $config: rule.config,\r\n      // returns the name of a given property, given just the property name (irrespective of the property's displayName)\r\n      // split on capital letters, first letter ensured to be capitalized\r\n      $getDisplayName: this.getDisplayName\r\n    };\r\n    return expression.evaluate(\r\n      { bindingContext: object, overrideContext },\r\n      this.lookupFunctions);\r\n  }\r\n\r\n  private validateRuleSequence(\r\n    object: any,\r\n    propertyName: string | number | null,\r\n    ruleSequence: Rule<any, any>[][],\r\n    sequence: number,\r\n    results: ValidateResult[]\r\n  ): Promise<ValidateResult[]> {\r\n    // are we validating all properties or a single property?\r\n    const validateAllProperties = propertyName === null || propertyName === undefined;\r\n\r\n    const rules = ruleSequence[sequence];\r\n    let allValid = true;\r\n\r\n    // validate each rule.\r\n    const promises: Promise<boolean>[] = [];\r\n    for (let i = 0; i < rules.length; i++) {\r\n      const rule = rules[i];\r\n\r\n      // is the rule related to the property we're validating.\r\n      // tslint:disable-next-line:triple-equals | Use loose equality for property keys\r\n      if (!validateAllProperties && rule.property.name != propertyName) {\r\n        continue;\r\n      }\r\n\r\n      // is this a conditional rule? is the condition met?\r\n      if (rule.when && !rule.when(object)) {\r\n        continue;\r\n      }\r\n\r\n      // validate.\r\n      const value = rule.property.name === null ? object : object[rule.property.name];\r\n      let promiseOrBoolean = rule.condition(value, object);\r\n      if (!(promiseOrBoolean instanceof Promise)) {\r\n        promiseOrBoolean = Promise.resolve(promiseOrBoolean);\r\n      }\r\n      promises.push(promiseOrBoolean.then(valid => {\r\n          const message = valid ? null : this.getMessage(rule, object, value);\r\n          results.push(new ValidateResult(rule, object, rule.property.name, valid, message));\r\n          allValid = allValid && valid;\r\n          return valid;\r\n        }));\r\n    }\r\n\r\n    return Promise.all(promises)\r\n      .then(() => {\r\n      sequence++;\r\n      if (allValid && sequence < ruleSequence.length) {\r\n        return this.validateRuleSequence(object, propertyName, ruleSequence, sequence, results);\r\n      }\r\n      return results;\r\n    });\r\n  }\r\n\r\n  private validate(\r\n    object: any,\r\n    propertyName: string | number | null,\r\n    rules: Rule<any, any>[][] | null\r\n  ): Promise<ValidateResult[]> {\r\n    // rules specified?\r\n    if (!rules) {\r\n      // no. attempt to locate the rules.\r\n      rules = Rules.get(object);\r\n    }\r\n\r\n    // any rules?\r\n    if (!rules || rules.length === 0) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    return this.validateRuleSequence(object, propertyName, rules, 0, []);\r\n  }\r\n}\r\n","/**\r\n * Validation triggers.\r\n */\r\nexport enum validateTrigger {\r\n  /**\r\n   * Manual validation.  Use the controller's `validate()` and  `reset()` methods\r\n   * to validate all bindings.\r\n   */\r\n  manual = 0,           // 0x000\r\n\r\n  /**\r\n   * Validate the binding when the binding's target element fires a DOM \"blur\" event.\r\n   */\r\n  blur = 1,             // 0x001\r\n\r\n  /**\r\n   * Validate the binding when it updates the model due to a change in the view.\r\n   */\r\n  change = 2,           // 0x010\r\n\r\n  /**\r\n   * Validate the binding when the binding's target element fires a DOM \"blur\" event and\r\n   * when it updates the model due to a change in the view.\r\n   */\r\n  changeOrBlur = 3,     // 0x011\r\n\r\n  /**\r\n   * Validate the binding when the binding's target element fires a DOM \"focusout\" event.\r\n   * Unlike \"blur\", this event bubbles.\r\n   */\r\n  focusout = 4,         // 0x100\r\n\r\n  /**\r\n   * Validate the binding when the binding's target element fires a DOM \"focusout\" event or\r\n   * when it updates the model due to a change in the view.\r\n   */\r\n  changeOrFocusout = 6, // 0x110\r\n}\r\n","import { Container } from 'aurelia-dependency-injection';\r\nimport { Validator } from './validator';\r\nimport { StandardValidator } from './implementation/standard-validator';\r\nimport { validateTrigger } from './validate-trigger';\r\n\r\nexport type ValidatorCtor = new (...args: any[]) => Validator;\r\n\r\n/**\r\n * Aurelia Validation Configuration API\r\n */\r\nexport class GlobalValidationConfiguration {\r\n  public static DEFAULT_VALIDATION_TRIGGER = validateTrigger.blur;\r\n\r\n  private validatorType: ValidatorCtor = StandardValidator;\r\n  private validationTrigger = GlobalValidationConfiguration.DEFAULT_VALIDATION_TRIGGER;\r\n\r\n  /**\r\n   * Use a custom Validator implementation.\r\n   */\r\n  public customValidator(type: ValidatorCtor) {\r\n    this.validatorType = type;\r\n    return this;\r\n  }\r\n\r\n  public defaultValidationTrigger(trigger: validateTrigger) {\r\n    this.validationTrigger = trigger;\r\n    return this;\r\n  }\r\n\r\n  public getDefaultValidationTrigger() {\r\n    return this.validationTrigger;\r\n  }\r\n\r\n  /**\r\n   * Applies the configuration.\r\n   */\r\n  public apply(container: Container) {\r\n    const validator = container.get(this.validatorType);\r\n    container.registerInstance(Validator, validator);\r\n    container.registerInstance(GlobalValidationConfiguration, this);\r\n  }\r\n}\r\n","import { DOM } from 'aurelia-pal';\r\n\r\n/**\r\n * Gets the DOM element associated with the data-binding. Most of the time it's\r\n * the binding.target but sometimes binding.target is an aurelia custom element,\r\n * or custom attribute which is a javascript \"class\" instance, so we need to use\r\n * the controller's container to retrieve the actual DOM element.\r\n */\r\nexport function getTargetDOMElement(binding: any, view: any): Element {\r\n  const target = binding.target;\r\n  // DOM element\r\n  if (target instanceof Element) {\r\n    return target;\r\n  }\r\n  // custom element or custom attribute\r\n  // tslint:disable-next-line:prefer-const\r\n  for (let i = 0, ii = view.controllers.length; i < ii; i++) {\r\n    const controller: any = view.controllers[i];\r\n    if (controller.viewModel === target) {\r\n      const element = controller.container.get(DOM.Element);\r\n      if (element) {\r\n        return element;\r\n      }\r\n      throw new Error(`Unable to locate target element for \"${binding.sourceExpression}\".`);\r\n    }\r\n  }\r\n  throw new Error(`Unable to locate target element for \"${binding.sourceExpression}\".`);\r\n}\r\n","import {\r\n  AccessMember,\r\n  AccessScope,\r\n  AccessKeyed,\r\n  BindingBehavior,\r\n  Expression,\r\n  ValueConverter,\r\n  Scope,\r\n  getContextFor\r\n} from 'aurelia-binding';\r\n\r\nfunction getObject(expression: Expression, objectExpression: Expression, source: any): null | undefined | object {\r\n  const value = objectExpression.evaluate(source, null as any);\r\n  if (value === null || value === undefined || value instanceof Object) {\r\n    return value;\r\n  }\r\n  // tslint:disable-next-line:max-line-length\r\n  throw new Error(`The '${objectExpression}' part of '${expression}' evaluates to ${value} instead of an object, null or undefined.`);\r\n}\r\n\r\n/**\r\n * Retrieves the object and property name for the specified expression.\r\n * @param expression The expression\r\n * @param source The scope\r\n */\r\nexport function getPropertyInfo(\r\n  expression: Expression,\r\n  source: Scope\r\n): { object: object; propertyName: string; } | null {\r\n  const originalExpression = expression;\r\n  while (expression instanceof BindingBehavior || expression instanceof ValueConverter) {\r\n    expression = expression.expression;\r\n  }\r\n\r\n  let object: null | undefined | object;\r\n  let propertyName: string;\r\n  if (expression instanceof AccessScope) {\r\n    object = getContextFor(expression.name, source, expression.ancestor);\r\n    propertyName = expression.name;\r\n  } else if (expression instanceof AccessMember) {\r\n    object = getObject(originalExpression, expression.object, source);\r\n    propertyName = expression.name;\r\n  } else if (expression instanceof AccessKeyed) {\r\n    object = getObject(originalExpression, expression.object, source);\r\n    propertyName = expression.key.evaluate(source);\r\n  } else {\r\n    throw new Error(`Expression '${originalExpression}' is not compatible with the validate binding-behavior.`);\r\n  }\r\n  if (object === null || object === undefined) {\r\n    return null;\r\n  }\r\n  return { object, propertyName };\r\n}\r\n","export function isString(value: any): boolean {\r\n  return Object.prototype.toString.call(value) === '[object String]';\r\n}\r\n\r\nexport function isNumber(value: any): boolean {\r\n  return Object.prototype.toString.call(value) === '[object Number]';\r\n}\r\n","import {\r\n  Parser,\r\n  AccessMember,\r\n  AccessScope\r\n} from 'aurelia-binding';\r\nimport { isString, isNumber } from './util';\r\n\r\nexport type PropertyAccessor<TObject, TValue> = (object: TObject) => TValue;\r\n\r\nexport class PropertyAccessorParser {\r\n  public static inject = [Parser];\r\n\r\n  constructor(private parser: Parser) { }\r\n\r\n  public parse<TObject, TValue>(property: string | number | PropertyAccessor<TObject, TValue>): string | number {\r\n    if (isString(property) || isNumber(property)) {\r\n      return property as string | number;\r\n    }\r\n    const accessorText = getAccessorExpression(property.toString());\r\n    const accessor = this.parser.parse(accessorText);\r\n    if (accessor instanceof AccessScope\r\n      || accessor instanceof AccessMember && accessor.object instanceof AccessScope) {\r\n      return accessor.name;\r\n    }\r\n    throw new Error(`Invalid property expression: \"${accessor}\"`);\r\n  }\r\n}\r\n\r\nexport function getAccessorExpression(fn: string): string {\r\n  /* tslint:disable:max-line-length */\r\n  const classic = /^function\\s*\\([$_\\w\\d]+\\)\\s*\\{(?:\\s*\"use strict\";)?(?:[$_\\s\\w\\d\\/\\*.['\"\\]+;\\(\\)]+)?\\s*return\\s+[$_\\w\\d]+\\.([$_\\w\\d]+)\\s*;?\\s*\\}$/;\r\n  /* tslint:enable:max-line-length */\r\n  const arrow = /^\\(?[$_\\w\\d]+\\)?\\s*=>\\s*[$_\\w\\d]+\\.([$_\\w\\d]+)$/;\r\n  const match = classic.exec(fn) || arrow.exec(fn);\r\n  if (match === null) {\r\n    throw new Error(`Unable to parse accessor function:\\n${fn}`);\r\n  }\r\n  return match[1];\r\n}\r\n","import { ValidateResult } from './validate-result';\r\nimport { ValidateInstruction } from './validate-instruction';\r\nimport { ControllerValidateResult } from './controller-validate-result';\r\n\r\nexport class ValidateEvent {\r\n  constructor(\r\n    /**\r\n     * The type of validate event. Either \"validate\" or \"reset\".\r\n     */\r\n    public readonly type: 'validate' | 'reset',\r\n\r\n    /**\r\n     * The controller's current array of errors. For an array containing both\r\n     * failed rules and passed rules, use the \"results\" property.\r\n     */\r\n    public readonly errors: ValidateResult[],\r\n\r\n    /**\r\n     * The controller's current array of validate results. This\r\n     * includes both passed rules and failed rules. For an array of only failed rules,\r\n     * use the \"errors\" property.\r\n     */\r\n    public readonly results: ValidateResult[],\r\n\r\n    /**\r\n     * The instruction passed to the \"validate\" or \"reset\" event. Will be null when\r\n     * the controller's validate/reset method was called with no instruction argument.\r\n     */\r\n    public readonly instruction: ValidateInstruction | null,\r\n\r\n    /**\r\n     * In events with type === \"validate\", this property will contain the result\r\n     * of validating the instruction (see \"instruction\" property). Use the controllerValidateResult\r\n     * to access the validate results specific to the call to \"validate\"\r\n     * (as opposed to using the \"results\" and \"errors\" properties to access the controller's entire\r\n     * set of results/errors).\r\n     */\r\n    public readonly controllerValidateResult: ControllerValidateResult | null\r\n\r\n  ) { }\r\n}\r\n","import { Binding, Expression } from 'aurelia-binding';\r\nimport { GlobalValidationConfiguration } from './config';\r\nimport { Validator } from './validator';\r\nimport { validateTrigger } from './validate-trigger';\r\nimport { getPropertyInfo } from './property-info';\r\nimport { ValidationRenderer, RenderInstruction } from './validation-renderer';\r\nimport { ValidateResult } from './validate-result';\r\nimport { ValidateInstruction } from './validate-instruction';\r\nimport { ControllerValidateResult } from './controller-validate-result';\r\nimport { PropertyAccessorParser, PropertyAccessor } from './property-accessor-parser';\r\nimport { ValidateEvent } from './validate-event';\r\n\r\n/**\r\n * Orchestrates validation.\r\n * Manages a set of bindings, renderers and objects.\r\n * Exposes the current list of validation results for binding purposes.\r\n */\r\nexport class ValidationController {\r\n  public static inject = [Validator, PropertyAccessorParser, GlobalValidationConfiguration];\r\n\r\n  // Registered bindings (via the validate binding behavior)\r\n  private bindings = new Map<Binding, BindingInfo>();\r\n\r\n  // Renderers that have been added to the controller instance.\r\n  private renderers: ValidationRenderer[] = [];\r\n\r\n  /**\r\n   * Validation results that have been rendered by the controller.\r\n   */\r\n  private results: ValidateResult[] = [];\r\n\r\n  /**\r\n   * Validation errors that have been rendered by the controller.\r\n   */\r\n  public errors: ValidateResult[] = [];\r\n\r\n  /**\r\n   *  Whether the controller is currently validating.\r\n   */\r\n  public validating = false;\r\n\r\n  // Elements related to validation results that have been rendered.\r\n  private elements = new Map<ValidateResult, Element[]>();\r\n\r\n  // Objects that have been added to the controller instance (entity-style validation).\r\n  private objects = new Map<any, any>();\r\n\r\n  /**\r\n   * The trigger that will invoke automatic validation of a property used in a binding.\r\n   */\r\n  public validateTrigger: validateTrigger;\r\n\r\n  // Promise that resolves when validation has completed.\r\n  private finishValidating: Promise<any> = Promise.resolve();\r\n\r\n  private eventCallbacks: ((event: ValidateEvent) => void)[] = [];\r\n\r\n  constructor(\r\n    private validator: Validator,\r\n    private propertyParser: PropertyAccessorParser,\r\n    config?: GlobalValidationConfiguration,\r\n  ) {\r\n    this.validateTrigger = config instanceof GlobalValidationConfiguration\r\n        ? config.getDefaultValidationTrigger()\r\n        : GlobalValidationConfiguration.DEFAULT_VALIDATION_TRIGGER;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to controller validate and reset events. These events occur when the\r\n   * controller's \"validate\"\" and \"reset\" methods are called.\r\n   * @param callback The callback to be invoked when the controller validates or resets.\r\n   */\r\n  public subscribe(callback: (event: ValidateEvent) => void) {\r\n    this.eventCallbacks.push(callback);\r\n    return {\r\n      dispose: () => {\r\n        const index = this.eventCallbacks.indexOf(callback);\r\n        if (index === -1) {\r\n          return;\r\n        }\r\n        this.eventCallbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adds an object to the set of objects that should be validated when validate is called.\r\n   * @param object The object.\r\n   * @param rules Optional. The rules. If rules aren't supplied the Validator implementation will lookup the rules.\r\n   */\r\n  public addObject(object: any, rules?: any): void {\r\n    this.objects.set(object, rules);\r\n  }\r\n\r\n  /**\r\n   * Removes an object from the set of objects that should be validated when validate is called.\r\n   * @param object The object.\r\n   */\r\n  public removeObject(object: any): void {\r\n    this.objects.delete(object);\r\n    this.processResultDelta(\r\n      'reset',\r\n      this.results.filter(result => result.object === object),\r\n      []);\r\n  }\r\n\r\n  /**\r\n   * Adds and renders an error.\r\n   */\r\n  public addError<TObject>(\r\n    message: string,\r\n    object: TObject,\r\n    propertyName: string | PropertyAccessor<TObject, string> | null = null\r\n  ): ValidateResult {\r\n    let resolvedPropertyName: string | number | null;\r\n    if (propertyName === null) {\r\n      resolvedPropertyName = propertyName as any;\r\n    } else {\r\n      resolvedPropertyName = this.propertyParser.parse(propertyName);\r\n    }\r\n    const result = new ValidateResult({ __manuallyAdded__: true }, object, resolvedPropertyName, false, message);\r\n    this.processResultDelta('validate', [], [result]);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Removes and unrenders an error.\r\n   */\r\n  public removeError(result: ValidateResult) {\r\n    if (this.results.indexOf(result) !== -1) {\r\n      this.processResultDelta('reset', [result], []);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a renderer.\r\n   * @param renderer The renderer.\r\n   */\r\n  public addRenderer(renderer: ValidationRenderer) {\r\n    this.renderers.push(renderer);\r\n    renderer.render({\r\n      kind: 'validate',\r\n      render: this.results.map(result => ({ result, elements: this.elements.get(result) as Element[] })),\r\n      unrender: []\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes a renderer.\r\n   * @param renderer The renderer.\r\n   */\r\n  public removeRenderer(renderer: ValidationRenderer) {\r\n    this.renderers.splice(this.renderers.indexOf(renderer), 1);\r\n    renderer.render({\r\n      kind: 'reset',\r\n      render: [],\r\n      unrender: this.results.map(result => ({ result, elements: this.elements.get(result) as Element[] }))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers a binding with the controller.\r\n   * @param binding The binding instance.\r\n   * @param target The DOM element.\r\n   * @param rules (optional) rules associated with the binding. Validator implementation specific.\r\n   */\r\n  public registerBinding(binding: Binding, target: Element, rules?: any) {\r\n    this.bindings.set(binding, { target, rules, propertyInfo: null });\r\n  }\r\n\r\n  /**\r\n   * Unregisters a binding with the controller.\r\n   * @param binding The binding instance.\r\n   */\r\n  public unregisterBinding(binding: Binding) {\r\n    this.resetBinding(binding);\r\n    this.bindings.delete(binding);\r\n  }\r\n\r\n  /**\r\n   * Interprets the instruction and returns a predicate that will identify\r\n   * relevant results in the list of rendered validation results.\r\n   */\r\n  private getInstructionPredicate(instruction?: ValidateInstruction): (result: ValidateResult) => boolean {\r\n    if (instruction) {\r\n      const { object, propertyName, rules } = instruction;\r\n      let predicate: (result: ValidateResult) => boolean;\r\n      if (instruction.propertyName) {\r\n        predicate = x => x.object === object && x.propertyName === propertyName;\r\n      } else {\r\n        predicate = x => x.object === object;\r\n      }\r\n      if (rules) {\r\n        return x => predicate(x) && this.validator.ruleExists(rules, x.rule);\r\n      }\r\n      return predicate;\r\n    } else {\r\n      return () => true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates and renders results.\r\n   * @param instruction Optional. Instructions on what to validate. If undefined, all\r\n   * objects and bindings will be validated.\r\n   */\r\n  public validate(instruction?: ValidateInstruction): Promise<ControllerValidateResult> {\r\n    // Get a function that will process the validation instruction.\r\n    let execute: () => Promise<ValidateResult[]>;\r\n    if (instruction) {\r\n      // tslint:disable-next-line:prefer-const\r\n      let { object, propertyName, rules } = instruction;\r\n      // if rules were not specified, check the object map.\r\n      rules = rules || this.objects.get(object);\r\n      // property specified?\r\n      if (instruction.propertyName === undefined) {\r\n        // validate the specified object.\r\n        execute = () => this.validator.validateObject(object, rules);\r\n      } else {\r\n        // validate the specified property.\r\n        execute = () => this.validator.validateProperty(object, propertyName, rules);\r\n      }\r\n    } else {\r\n      // validate all objects and bindings.\r\n      execute = () => {\r\n        const promises: Promise<ValidateResult[]>[] = [];\r\n        for (const [object, rules] of Array.from(this.objects)) {\r\n          promises.push(this.validator.validateObject(object, rules));\r\n        }\r\n        for (const [binding, { rules }] of Array.from(this.bindings)) {\r\n          const propertyInfo = getPropertyInfo(binding.sourceExpression as Expression, binding.source);\r\n          if (!propertyInfo || this.objects.has(propertyInfo.object)) {\r\n            continue;\r\n          }\r\n          promises.push(this.validator.validateProperty(propertyInfo.object, propertyInfo.propertyName, rules));\r\n        }\r\n        return Promise.all(promises).then(resultSets => resultSets.reduce((a, b) => a.concat(b), []));\r\n      };\r\n    }\r\n\r\n    // Wait for any existing validation to finish, execute the instruction, render the results.\r\n    this.validating = true;\r\n    const returnPromise: Promise<ControllerValidateResult> = this.finishValidating\r\n      .then(execute)\r\n      .then((newResults: ValidateResult[]) => {\r\n        const predicate = this.getInstructionPredicate(instruction);\r\n        const oldResults = this.results.filter(predicate);\r\n        this.processResultDelta('validate', oldResults, newResults);\r\n        if (returnPromise === this.finishValidating) {\r\n          this.validating = false;\r\n        }\r\n        const result: ControllerValidateResult = {\r\n          instruction,\r\n          valid: newResults.find(x => !x.valid) === undefined,\r\n          results: newResults\r\n        };\r\n        this.invokeCallbacks(instruction, result);\r\n        return result;\r\n      })\r\n      .catch(exception => {\r\n        // recover, to enable subsequent calls to validate()\r\n        this.validating = false;\r\n        this.finishValidating = Promise.resolve();\r\n\r\n        return Promise.reject(exception);\r\n      });\r\n\r\n    this.finishValidating = returnPromise;\r\n\r\n    return returnPromise;\r\n  }\r\n\r\n  /**\r\n   * Resets any rendered validation results (unrenders).\r\n   * @param instruction Optional. Instructions on what to reset. If unspecified all rendered results\r\n   * will be unrendered.\r\n   */\r\n  public reset(instruction?: ValidateInstruction) {\r\n    const predicate = this.getInstructionPredicate(instruction);\r\n    const oldResults = this.results.filter(predicate);\r\n    this.processResultDelta('reset', oldResults, []);\r\n    this.invokeCallbacks(instruction, null);\r\n  }\r\n\r\n  /**\r\n   * Gets the elements associated with an object and propertyName (if any).\r\n   */\r\n  private getAssociatedElements({ object, propertyName }: ValidateResult): Element[] {\r\n    const elements: Element[] = [];\r\n    for (const [binding, { target }] of Array.from(this.bindings)) {\r\n      const propertyInfo = getPropertyInfo(binding.sourceExpression as Expression, binding.source);\r\n      if (propertyInfo && propertyInfo.object === object && propertyInfo.propertyName === propertyName) {\r\n        elements.push(target);\r\n      }\r\n    }\r\n    return elements;\r\n  }\r\n\r\n  private processResultDelta(\r\n    kind: 'validate' | 'reset',\r\n    oldResults: ValidateResult[], newResults: ValidateResult[]\r\n  ) {\r\n    // prepare the instruction.\r\n    const instruction: RenderInstruction = {\r\n      kind,\r\n      render: [],\r\n      unrender: []\r\n    };\r\n\r\n    // create a shallow copy of newResults so we can mutate it without causing side-effects.\r\n    newResults = newResults.slice(0);\r\n\r\n    // create unrender instructions from the old results.\r\n    for (const oldResult of oldResults) {\r\n      // get the elements associated with the old result.\r\n      const elements = this.elements.get(oldResult) as Element[];\r\n\r\n      // remove the old result from the element map.\r\n      this.elements.delete(oldResult);\r\n\r\n      // create the unrender instruction.\r\n      instruction.unrender.push({ result: oldResult, elements });\r\n\r\n      // determine if there's a corresponding new result for the old result we are unrendering.\r\n      const newResultIndex = newResults.findIndex(\r\n        x => x.rule === oldResult.rule && x.object === oldResult.object && x.propertyName === oldResult.propertyName);\r\n      if (newResultIndex === -1) {\r\n        // no corresponding new result... simple remove.\r\n        this.results.splice(this.results.indexOf(oldResult), 1);\r\n        if (!oldResult.valid) {\r\n          this.errors.splice(this.errors.indexOf(oldResult), 1);\r\n        }\r\n      } else {\r\n        // there is a corresponding new result...\r\n        const newResult = newResults.splice(newResultIndex, 1)[0];\r\n\r\n        // get the elements that are associated with the new result.\r\n        const elements = this.getAssociatedElements(newResult);\r\n        this.elements.set(newResult, elements);\r\n\r\n        // create a render instruction for the new result.\r\n        instruction.render.push({ result: newResult, elements });\r\n\r\n        // do an in-place replacement of the old result with the new result.\r\n        // this ensures any repeats bound to this.results will not thrash.\r\n        this.results.splice(this.results.indexOf(oldResult), 1, newResult);\r\n        if (!oldResult.valid && newResult.valid) {\r\n          this.errors.splice(this.errors.indexOf(oldResult), 1);\r\n        } else if (!oldResult.valid && !newResult.valid) {\r\n          this.errors.splice(this.errors.indexOf(oldResult), 1, newResult);\r\n        } else if (!newResult.valid) {\r\n          this.errors.push(newResult);\r\n        }\r\n      }\r\n    }\r\n\r\n    // create render instructions from the remaining new results.\r\n    for (const result of newResults) {\r\n      const elements = this.getAssociatedElements(result);\r\n      instruction.render.push({ result, elements });\r\n      this.elements.set(result, elements);\r\n      this.results.push(result);\r\n      if (!result.valid) {\r\n        this.errors.push(result);\r\n      }\r\n    }\r\n\r\n    // render.\r\n    for (const renderer of this.renderers) {\r\n      renderer.render(instruction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates the property associated with a binding.\r\n   */\r\n  public validateBinding(binding: Binding) {\r\n    if (!binding.isBound) {\r\n      return;\r\n    }\r\n    const propertyInfo = getPropertyInfo(binding.sourceExpression as Expression, binding.source);\r\n    let rules;\r\n    const registeredBinding = this.bindings.get(binding);\r\n    if (registeredBinding) {\r\n      rules = registeredBinding.rules;\r\n      registeredBinding.propertyInfo = propertyInfo;\r\n    }\r\n    if (!propertyInfo) {\r\n      return;\r\n    }\r\n    const { object, propertyName } = propertyInfo;\r\n    this.validate({ object, propertyName, rules });\r\n  }\r\n\r\n  /**\r\n   * Resets the results for a property associated with a binding.\r\n   */\r\n  public resetBinding(binding: Binding) {\r\n    const registeredBinding = this.bindings.get(binding);\r\n    let propertyInfo = getPropertyInfo(binding.sourceExpression as Expression, binding.source);\r\n    if (!propertyInfo && registeredBinding) {\r\n      propertyInfo = registeredBinding.propertyInfo;\r\n    }\r\n    if (registeredBinding) {\r\n      registeredBinding.propertyInfo = null;\r\n    }\r\n    if (!propertyInfo) {\r\n      return;\r\n    }\r\n    const { object, propertyName } = propertyInfo;\r\n    this.reset({ object, propertyName });\r\n  }\r\n\r\n  /**\r\n   * Changes the controller's validateTrigger.\r\n   * @param newTrigger The new validateTrigger\r\n   */\r\n  public changeTrigger(newTrigger: validateTrigger) {\r\n    this.validateTrigger = newTrigger;\r\n    const bindings = Array.from(this.bindings.keys());\r\n    for (const binding of bindings) {\r\n      const source = binding.source;\r\n      binding.unbind();\r\n      binding.bind(source);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Revalidates the controller's current set of errors.\r\n   */\r\n  public revalidateErrors() {\r\n    for (const { object, propertyName, rule } of this.errors) {\r\n      if (rule.__manuallyAdded__) {\r\n        continue;\r\n      }\r\n      const rules = [[rule]];\r\n      this.validate({ object, propertyName, rules });\r\n    }\r\n  }\r\n\r\n  private invokeCallbacks(instruction: ValidateInstruction | undefined, result: ControllerValidateResult | null) {\r\n    if (this.eventCallbacks.length === 0) {\r\n      return;\r\n    }\r\n    const event = new ValidateEvent(\r\n      result ? 'validate' : 'reset',\r\n      this.errors,\r\n      this.results,\r\n      instruction || null,\r\n      result);\r\n    for (let i = 0; i < this.eventCallbacks.length; i++) {\r\n      this.eventCallbacks[i](event);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Information related to an \"& validate\" decorated binding.\r\n */\r\nexport interface BindingInfo {\r\n  /**\r\n   * The DOM element associated with the binding.\r\n   */\r\n  target: Element;\r\n\r\n  /**\r\n   * The rules associated with the binding via the validate binding behavior's rules parameter.\r\n   */\r\n  rules?: any;\r\n\r\n  /**\r\n   * The object and property associated with the binding.\r\n   */\r\n  propertyInfo: { object: any; propertyName: string; } | null;\r\n}\r\n","// tslint:disable:no-bitwise\r\nimport { Optional } from 'aurelia-dependency-injection';\r\nimport { TaskQueue } from 'aurelia-task-queue';\r\nimport { ValidationController } from './validation-controller';\r\nimport { validateTrigger } from './validate-trigger';\r\nimport { getTargetDOMElement } from './get-target-dom-element';\r\nimport { getPropertyInfo } from './property-info';\r\nimport { Expression } from 'aurelia-binding';\r\n\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated.\r\n */\r\nexport abstract class ValidateBindingBehaviorBase {\r\n  constructor(private taskQueue: TaskQueue) { }\r\n\r\n  protected abstract getValidateTrigger(controller: ValidationController): validateTrigger;\r\n\r\n  public bind(binding: any, source: any, rulesOrController?: ValidationController | any, rules?: any) {\r\n    // identify the target element.\r\n    const target = getTargetDOMElement(binding, source);\r\n\r\n    // locate the controller.\r\n    let controller: ValidationController;\r\n    if (rulesOrController instanceof ValidationController) {\r\n      controller = rulesOrController;\r\n    } else {\r\n      controller = source.container.get(Optional.of(ValidationController));\r\n      rules = rulesOrController;\r\n    }\r\n    if (controller === null) {\r\n      throw new Error(`A ValidationController has not been registered.`);\r\n    }\r\n\r\n    controller.registerBinding(binding, target, rules);\r\n    binding.validationController = controller;\r\n    const trigger = this.getValidateTrigger(controller);\r\n    const event =\r\n      (trigger & validateTrigger.blur) === validateTrigger.blur ? 'blur'\r\n        : (trigger & validateTrigger.focusout) === validateTrigger.focusout ? 'focusout'\r\n          : null;\r\n    const hasChangeTrigger = (trigger & validateTrigger.change) === validateTrigger.change;\r\n    binding.isDirty = !hasChangeTrigger;\r\n    // validatedOnce is used to control whether controller should validate upon user input\r\n    //\r\n    // always true when validation trigger doesn't include \"blur\" event (blur/focusout)\r\n    // else it will be set to true after (a) the first user input & loss of focus or (b) validation\r\n    binding.validatedOnce = hasChangeTrigger && event === null;\r\n    if (hasChangeTrigger) {\r\n      binding.vbbUpdateSource = binding.updateSource;\r\n      // tslint:disable-next-line:only-arrow-functions\r\n      // tslint:disable-next-line:space-before-function-paren\r\n      binding.updateSource = function (value: any) {\r\n        this.vbbUpdateSource(value);\r\n        this.isDirty = true;\r\n        if (this.validatedOnce) {\r\n          this.validationController.validateBinding(this);\r\n        }\r\n      };\r\n    }\r\n\r\n    if (event !== null) {\r\n      binding.focusLossHandler = () => {\r\n        this.taskQueue.queueMicroTask(() => {\r\n          if (binding.isDirty) {\r\n            controller.validateBinding(binding);\r\n            binding.validatedOnce = true;\r\n          }\r\n        });\r\n      };\r\n      binding.validationTriggerEvent = event;\r\n      binding.validateTarget = target;\r\n      target.addEventListener(event, binding.focusLossHandler);\r\n      if (hasChangeTrigger) {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const { propertyName } = getPropertyInfo(binding.sourceExpression as Expression, binding.source)!;\r\n        binding.validationSubscription = controller.subscribe((event) => {\r\n          if (!binding.validatedOnce && event.type === 'validate') {\r\n            binding.validatedOnce = event.errors.findIndex((e) => e.propertyName === propertyName) > -1;\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    if (trigger !== validateTrigger.manual) {\r\n      binding.standardUpdateTarget = binding.updateTarget;\r\n      // tslint:disable-next-line:only-arrow-functions\r\n      // tslint:disable-next-line:space-before-function-paren\r\n      binding.updateTarget = function (value: any) {\r\n        this.standardUpdateTarget(value);\r\n        this.validationController.resetBinding(this);\r\n      };\r\n    }\r\n  }\r\n\r\n  public unbind(binding: any) {\r\n    // reset the binding to it's original state.\r\n    if (binding.vbbUpdateSource) {\r\n      binding.updateSource = binding.vbbUpdateSource;\r\n      binding.vbbUpdateSource = null;\r\n    }\r\n    if (binding.standardUpdateTarget) {\r\n      binding.updateTarget = binding.standardUpdateTarget;\r\n      binding.standardUpdateTarget = null;\r\n    }\r\n    if (binding.focusLossHandler) {\r\n      binding.validateTarget.removeEventListener(binding.validationTriggerEvent, binding.focusLossHandler);\r\n      binding.focusLossHandler = null;\r\n      binding.validateTarget = null;\r\n    }\r\n    if (binding.validationSubscription) {\r\n      binding.validationSubscription.dispose();\r\n      binding.validationSubscription = null;\r\n    }\r\n    binding.validationController.unregisterBinding(binding);\r\n    binding.validationController = null;\r\n    binding.isDirty = null;\r\n    binding.validatedOnce = null;\r\n  }\r\n}\r\n","import { TaskQueue } from 'aurelia-task-queue';\r\nimport { ValidationController } from './validation-controller';\r\nimport { validateTrigger } from './validate-trigger';\r\nimport { ValidateBindingBehaviorBase } from './validate-binding-behavior-base';\r\nimport { bindingBehavior } from 'aurelia-binding';\r\n\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated\r\n * when the validate trigger specified by the associated controller's\r\n * validateTrigger property occurs.\r\n */\r\n@bindingBehavior('validate')\r\nexport class ValidateBindingBehavior extends ValidateBindingBehaviorBase {\r\n  public static inject = [TaskQueue];\r\n\r\n  public getValidateTrigger(controller: ValidationController) {\r\n    return controller.validateTrigger;\r\n  }\r\n}\r\n\r\n/**\r\n * Binding behavior. Indicates the bound property will be validated\r\n * manually, by calling controller.validate(). No automatic validation\r\n * triggered by data-entry or blur will occur.\r\n */\r\n@bindingBehavior('validateManually')\r\nexport class ValidateManuallyBindingBehavior extends ValidateBindingBehaviorBase {\r\n  public static inject = [TaskQueue];\r\n\r\n  public getValidateTrigger() {\r\n    return validateTrigger.manual;\r\n  }\r\n}\r\n\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated\r\n * when the associated element blurs.\r\n */\r\n@bindingBehavior('validateOnBlur')\r\nexport class ValidateOnBlurBindingBehavior extends ValidateBindingBehaviorBase {\r\n  public static inject = [TaskQueue];\r\n\r\n  public getValidateTrigger() {\r\n    return validateTrigger.blur;\r\n  }\r\n}\r\n\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated\r\n * when the associated element is changed by the user, causing a change\r\n * to the model.\r\n */\r\n@bindingBehavior('validateOnChange')\r\nexport class ValidateOnChangeBindingBehavior extends ValidateBindingBehaviorBase {\r\n  public static inject = [TaskQueue];\r\n\r\n  public getValidateTrigger() {\r\n    return validateTrigger.change;\r\n  }\r\n}\r\n\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated\r\n * when the associated element blurs or is changed by the user, causing\r\n * a change to the model.\r\n */\r\n@bindingBehavior('validateOnChangeOrBlur')\r\nexport class ValidateOnChangeOrBlurBindingBehavior extends ValidateBindingBehaviorBase {\r\n  public static inject = [TaskQueue];\r\n\r\n  public getValidateTrigger() {\r\n    return validateTrigger.changeOrBlur;\r\n  }\r\n}\r\n\r\n@bindingBehavior('validateOnFocusout')\r\nexport class ValidateOnFocusoutBindingBehavior extends ValidateBindingBehaviorBase {\r\n  public static inject = [TaskQueue];\r\n\r\n  public getValidateTrigger() {\r\n    return validateTrigger.focusout;\r\n  }\r\n}\r\n\r\n@bindingBehavior('validateOnChangeOrFocusout')\r\nexport class ValidateOnChangeOrFocusoutBindingBehavior extends ValidateBindingBehaviorBase {\r\n  public static inject = [TaskQueue];\r\n\r\n  public getValidateTrigger() {\r\n    return validateTrigger.changeOrFocusout;\r\n  }\r\n}\r\n","import { Container } from 'aurelia-dependency-injection';\r\nimport { GlobalValidationConfiguration } from './config';\r\nimport { ValidationController } from './validation-controller';\r\nimport { Validator } from './validator';\r\nimport { PropertyAccessorParser } from './property-accessor-parser';\r\n\r\n/**\r\n * Creates ValidationController instances.\r\n */\r\nexport class ValidationControllerFactory {\r\n  public static get(container: Container) {\r\n    return new ValidationControllerFactory(container);\r\n  }\r\n\r\n  constructor(private container: Container) { }\r\n\r\n  /**\r\n   * Creates a new controller instance.\r\n   */\r\n  public create(validator?: Validator) {\r\n    if (!validator) {\r\n      validator = this.container.get(Validator) as Validator;\r\n    }\r\n    const propertyParser = this.container.get(PropertyAccessorParser) as PropertyAccessorParser;\r\n    const config = this.container.get(GlobalValidationConfiguration) as GlobalValidationConfiguration;\r\n    return new ValidationController(validator, propertyParser, config);\r\n  }\r\n\r\n  /**\r\n   * Creates a new controller and registers it in the current element's container so that it's\r\n   * available to the validate binding behavior and renderers.\r\n   */\r\n  public createForCurrentScope(validator?: Validator) {\r\n    const controller = this.create(validator);\r\n    this.container.registerInstance(ValidationController, controller);\r\n    return controller;\r\n  }\r\n}\r\n\r\n(ValidationControllerFactory as any)['protocol:aurelia:resolver'] = true;\r\n","import { bindingMode } from 'aurelia-binding';\r\nimport { Lazy } from 'aurelia-dependency-injection';\r\nimport { customAttribute, bindable } from 'aurelia-templating';\r\nimport { ValidationController } from './validation-controller';\r\nimport { ValidateResult } from './validate-result';\r\nimport { ValidationRenderer, RenderInstruction } from './validation-renderer';\r\nimport { DOM } from 'aurelia-pal';\r\n\r\nexport interface RenderedError {\r\n  error: ValidateResult;\r\n  targets: Element[];\r\n}\r\n\r\n@customAttribute('validation-errors')\r\nexport class ValidationErrorsCustomAttribute implements ValidationRenderer {\r\n\r\n  public static inject(): [typeof DOM.Element, Lazy<ValidationController>] {\r\n    return [DOM.Element, Lazy.of(ValidationController)];\r\n  }\r\n\r\n  @bindable({ defaultBindingMode: bindingMode.oneWay })\r\n  public controller: ValidationController | null = null;\r\n\r\n  @bindable({ primaryProperty: true, defaultBindingMode: bindingMode.twoWay })\r\n  public errors: RenderedError[] = [];\r\n\r\n  private errorsInternal: RenderedError[] = [];\r\n\r\n  constructor(private boundaryElement: Element, private controllerAccessor: () => ValidationController) {\r\n  }\r\n\r\n  public sort() {\r\n    this.errorsInternal.sort((a, b) => {\r\n      if (a.targets[0] === b.targets[0]) {\r\n        return 0;\r\n      }\r\n      // tslint:disable-next-line:no-bitwise\r\n      return a.targets[0].compareDocumentPosition(b.targets[0]) & 2 ? 1 : -1;\r\n    });\r\n  }\r\n\r\n  public interestingElements(elements: Element[]): Element[] {\r\n    return elements.filter(e => this.boundaryElement.contains(e));\r\n  }\r\n\r\n  public render(instruction: RenderInstruction) {\r\n    for (const { result } of instruction.unrender) {\r\n      const index = this.errorsInternal.findIndex(x => x.error === result);\r\n      if (index !== -1) {\r\n        this.errorsInternal.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    for (const { result, elements } of instruction.render) {\r\n      if (result.valid) {\r\n        continue;\r\n      }\r\n      const targets = this.interestingElements(elements);\r\n      if (targets.length) {\r\n        this.errorsInternal.push({ error: result, targets });\r\n      }\r\n    }\r\n\r\n    this.sort();\r\n    this.errors = this.errorsInternal;\r\n  }\r\n\r\n  public bind() {\r\n    if (!this.controller) {\r\n      this.controller = this.controllerAccessor();\r\n    }\r\n    // this will call render() with the side-effect of updating this.errors\r\n    this.controller.addRenderer(this);\r\n  }\r\n\r\n  public unbind() {\r\n    if (this.controller) {\r\n      this.controller.removeRenderer(this);\r\n    }\r\n  }\r\n}\r\n","import { ValidationController } from './validation-controller';\r\nimport { ValidationRenderer } from './validation-renderer';\r\nimport { customAttribute } from 'aurelia-templating';\r\n\r\n@customAttribute('validation-renderer')\r\nexport class ValidationRendererCustomAttribute {\r\n\r\n  private container: any;\r\n  private controller: ValidationController;\r\n  private value: string;\r\n  private renderer: ValidationRenderer;\r\n\r\n  public created(view: any) {\r\n    this.container = view.container;\r\n  }\r\n\r\n  public bind() {\r\n    this.controller = this.container.get(ValidationController);\r\n    this.renderer = this.container.get(this.value);\r\n    this.controller.addRenderer(this.renderer);\r\n  }\r\n\r\n  public unbind() {\r\n    this.controller.removeRenderer(this.renderer);\r\n    this.controller = null as any;\r\n    this.renderer = null as any;\r\n  }\r\n}\r\n","import { Rule, RuleProperty, ValidationDisplayNameAccessor } from './rule';\r\nimport { ValidationMessageParser } from './validation-message-parser';\r\nimport { Rules } from './rules';\r\nimport { validationMessages } from './validation-messages';\r\nimport { PropertyAccessorParser, PropertyAccessor } from '../property-accessor-parser';\r\nimport { isString } from '../util';\r\n\r\n/**\r\n * Part of the fluent rule API. Enables customizing property rules.\r\n */\r\nexport class FluentRuleCustomizer<TObject, TValue> {\r\n  private rule: Rule<TObject, TValue>;\r\n\r\n  constructor(\r\n    property: RuleProperty,\r\n    condition: (value: TValue, object?: TObject) => boolean | Promise<boolean>,\r\n    config: object = {},\r\n    private fluentEnsure: FluentEnsure<TObject>,\r\n    private fluentRules: FluentRules<TObject, TValue>,\r\n    private parsers: Parsers\r\n  ) {\r\n    this.rule = {\r\n      property,\r\n      condition,\r\n      config,\r\n      when: null,\r\n      messageKey: 'default',\r\n      message: null,\r\n      sequence: fluentRules.sequence\r\n    };\r\n    this.fluentEnsure._addRule(this.rule);\r\n  }\r\n\r\n  /**\r\n   * Validate subsequent rules after previously declared rules have\r\n   * been validated successfully. Use to postpone validation of costly\r\n   * rules until less expensive rules pass validation.\r\n   */\r\n  public then() {\r\n    this.fluentRules.sequence++;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Specifies the key to use when looking up the rule's validation message.\r\n   */\r\n  public withMessageKey(key: string) {\r\n    this.rule.messageKey = key;\r\n    this.rule.message = null;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Specifies rule's validation message.\r\n   */\r\n  public withMessage(message: string) {\r\n    this.rule.messageKey = 'custom';\r\n    this.rule.message = this.parsers.message.parse(message);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Specifies a condition that must be met before attempting to validate the rule.\r\n   * @param condition A function that accepts the object as a parameter and returns true\r\n   * or false whether the rule should be evaluated.\r\n   */\r\n  public when(condition: (object: TObject) => boolean) {\r\n    this.rule.when = condition;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Tags the rule instance, enabling the rule to be found easily\r\n   * using ValidationRules.taggedRules(rules, tag)\r\n   */\r\n  public tag(tag: string) {\r\n    this.rule.tag = tag;\r\n    return this;\r\n  }\r\n\r\n  ///// FluentEnsure APIs /////\r\n\r\n  /**\r\n   * Target a property with validation rules.\r\n   * @param property The property to target. Can be the property name or a property accessor function.\r\n   */\r\n  public ensure<TValue2>(subject: string | ((model: TObject) => TValue2)) {\r\n    return this.fluentEnsure.ensure<TValue2>(subject);\r\n  }\r\n\r\n  /**\r\n   * Targets an object with validation rules.\r\n   */\r\n  public ensureObject() {\r\n    return this.fluentEnsure.ensureObject();\r\n  }\r\n\r\n  /**\r\n   * Rules that have been defined using the fluent API.\r\n   */\r\n  public get rules() {\r\n    return this.fluentEnsure.rules;\r\n  }\r\n\r\n  /**\r\n   * Applies the rules to a class or object, making them discoverable by the StandardValidator.\r\n   * @param target A class or object.\r\n   */\r\n  public on(target: any) {\r\n    return this.fluentEnsure.on(target);\r\n  }\r\n\r\n  ///////// FluentRules APIs /////////\r\n\r\n  /**\r\n   * Applies an ad-hoc rule function to the ensured property or object.\r\n   * @param condition The function to validate the rule.\r\n   * Will be called with two arguments, the property value and the object.\r\n   * Should return a boolean or a Promise that resolves to a boolean.\r\n   */\r\n  public satisfies(condition: (value: TValue, object: TObject) => boolean | Promise<boolean>, config?: object) {\r\n    return this.fluentRules.satisfies(condition, config);\r\n  }\r\n\r\n  /**\r\n   * Applies a rule by name.\r\n   * @param name The name of the custom or standard rule.\r\n   * @param args The rule's arguments.\r\n   */\r\n  public satisfiesRule(name: string, ...args: any[]) {\r\n    return this.fluentRules.satisfiesRule(name, ...args);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"required\" rule to the property.\r\n   * The value cannot be null, undefined or whitespace.\r\n   */\r\n  public required() {\r\n    return this.fluentRules.required();\r\n  }\r\n\r\n  /**\r\n   * Applies the \"matches\" rule to the property.\r\n   * Value must match the specified regular expression.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public matches(regex: RegExp) {\r\n    return this.fluentRules.matches(regex);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"email\" rule to the property.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public email() {\r\n    return this.fluentRules.email();\r\n  }\r\n\r\n  /**\r\n   * Applies the \"minLength\" STRING validation rule to the property.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public minLength(length: number) {\r\n    return this.fluentRules.minLength(length);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"maxLength\" STRING validation rule to the property.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public maxLength(length: number) {\r\n    return this.fluentRules.maxLength(length);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"minItems\" ARRAY validation rule to the property.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public minItems(count: number) {\r\n    return this.fluentRules.minItems(count);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"maxItems\" ARRAY validation rule to the property.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public maxItems(count: number) {\r\n    return this.fluentRules.maxItems(count);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"min\" NUMBER validation rule to the property.\r\n   * Value must be greater than or equal to the specified constraint.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public min(value: number) {\r\n    return this.fluentRules.min(value);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"max\" NUMBER validation rule to the property.\r\n   * Value must be less than or equal to the specified constraint.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public max(value: number) {\r\n    return this.fluentRules.max(value);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"range\" NUMBER validation rule to the property.\r\n   * Value must be between or equal to the specified min and max.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public range(min: number, max: number) {\r\n    return this.fluentRules.range(min, max);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"between\" NUMBER validation rule to the property.\r\n   * Value must be between but not equal to the specified min and max.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public between(min: number, max: number) {\r\n    return this.fluentRules.between(min, max);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"equals\" validation rule to the property.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public equals(expectedValue: TValue) {\r\n    return this.fluentRules.equals(expectedValue);\r\n  }\r\n}\r\n\r\n/**\r\n * Part of the fluent rule API. Enables applying rules to properties and objects.\r\n */\r\nexport class FluentRules<TObject, TValue> {\r\n  public static customRules: {\r\n    [name: string]: {\r\n      condition: (value: any, object?: any, ...fluentArgs: any[]) => boolean | Promise<boolean>;\r\n      argsToConfig?: (...args: any[]) => any;\r\n    }\r\n  } = {};\r\n\r\n  /**\r\n   * Current rule sequence number. Used to postpone evaluation of rules until rules\r\n   * with lower sequence number have successfully validated. The \"then\" fluent API method\r\n   * manages this property, there's usually no need to set it directly.\r\n   */\r\n  public sequence = 0;\r\n\r\n  constructor(\r\n    private fluentEnsure: FluentEnsure<TObject>,\r\n    private parsers: Parsers,\r\n    private property: RuleProperty\r\n  ) { }\r\n\r\n  /**\r\n   * Sets the display name of the ensured property.\r\n   */\r\n  public displayName(name: string | ValidationDisplayNameAccessor | null) {\r\n    this.property.displayName = name;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Applies an ad-hoc rule function to the ensured property or object.\r\n   * @param condition The function to validate the rule.\r\n   * Will be called with two arguments, the property value and the object.\r\n   * Should return a boolean or a Promise that resolves to a boolean.\r\n   */\r\n  public satisfies(condition: (value: TValue, object?: TObject) => boolean | Promise<boolean>, config?: object) {\r\n    return new FluentRuleCustomizer<TObject, TValue>(\r\n      this.property, condition, config, this.fluentEnsure, this, this.parsers);\r\n  }\r\n\r\n  /**\r\n   * Applies a rule by name.\r\n   * @param name The name of the custom or standard rule.\r\n   * @param args The rule's arguments.\r\n   */\r\n  public satisfiesRule(name: string, ...args: any[]): FluentRuleCustomizer<TObject, TValue> {\r\n    let rule = FluentRules.customRules[name];\r\n    if (!rule) {\r\n      // standard rule?\r\n      rule = (this as any)[name];\r\n      if (rule instanceof Function) {\r\n        return rule.call(this, ...args);\r\n      }\r\n      throw new Error(`Rule with name \"${name}\" does not exist.`);\r\n    }\r\n    const config = rule.argsToConfig ? rule.argsToConfig(...args) : undefined;\r\n    return this.satisfies((value, obj) => rule.condition.call(this, value, obj, ...args), config)\r\n      .withMessageKey(name);\r\n  }\r\n\r\n  /**\r\n   * Applies the \"required\" rule to the property.\r\n   * The value cannot be null, undefined or whitespace.\r\n   */\r\n  public required() {\r\n    return this.satisfies(\r\n      value =>\r\n        value !== null\r\n        && value !== undefined\r\n        && !(isString(value) && !/\\S/.test(value as any))\r\n    ).withMessageKey('required');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"matches\" rule to the property.\r\n   * Value must match the specified regular expression.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public matches(regex: RegExp) {\r\n    return this.satisfies(\r\n      value => value === null || value === undefined || (value as any).length === 0 || regex.test(value as any))\r\n      .withMessageKey('matches');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"email\" rule to the property.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public email() {\r\n    // regex from https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\r\n    /* tslint:disable:max-line-length */\r\n    return this.matches(/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/)\r\n      /* tslint:enable:max-line-length */\r\n      .withMessageKey('email');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"minLength\" STRING validation rule to the property.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public minLength(length: number) {\r\n    return this.satisfies(\r\n      (value: any) => value === null || value === undefined || value.length === 0 || value.length >= length,\r\n      { length })\r\n      .withMessageKey('minLength');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"maxLength\" STRING validation rule to the property.\r\n   * null, undefined and empty-string values are considered valid.\r\n   */\r\n  public maxLength(length: number) {\r\n    return this.satisfies(\r\n      (value: any) => value === null || value === undefined || value.length === 0 || value.length <= length,\r\n      { length })\r\n      .withMessageKey('maxLength');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"minItems\" ARRAY validation rule to the property.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public minItems(count: number) {\r\n    return this.satisfies((value: any) => value === null || value === undefined || value.length >= count, { count })\r\n      .withMessageKey('minItems');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"maxItems\" ARRAY validation rule to the property.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public maxItems(count: number) {\r\n    return this.satisfies((value: any) => value === null || value === undefined || value.length <= count, { count })\r\n      .withMessageKey('maxItems');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"min\" NUMBER validation rule to the property.\r\n   * Value must be greater than or equal to the specified constraint.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public min(constraint: number) {\r\n    return this.satisfies((value: any) => value === null || value === undefined || value >= constraint, { constraint })\r\n      .withMessageKey('min');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"max\" NUMBER validation rule to the property.\r\n   * Value must be less than or equal to the specified constraint.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public max(constraint: number) {\r\n    return this.satisfies((value: any) => value === null || value === undefined || value <= constraint, { constraint })\r\n      .withMessageKey('max');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"range\" NUMBER validation rule to the property.\r\n   * Value must be between or equal to the specified min and max.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public range(min: number, max: number) {\r\n    return this.satisfies((value: any) => value === null || value === undefined || (value >= min && value <= max),\r\n      { min, max })\r\n      .withMessageKey('range');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"between\" NUMBER validation rule to the property.\r\n   * Value must be between but not equal to the specified min and max.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public between(min: number, max: number) {\r\n    return this.satisfies((value: any) => value === null || value === undefined || (value > min && value < max),\r\n      { min, max })\r\n      .withMessageKey('between');\r\n  }\r\n\r\n  /**\r\n   * Applies the \"equals\" validation rule to the property.\r\n   * null and undefined values are considered valid.\r\n   */\r\n  public equals(expectedValue: TValue) {\r\n    return this.satisfies(\r\n      value => value === null || value === undefined || value as any === '' || value === expectedValue,\r\n      { expectedValue })\r\n      .withMessageKey('equals');\r\n  }\r\n}\r\n\r\n/**\r\n * Part of the fluent rule API. Enables targeting properties and objects with rules.\r\n */\r\nexport class FluentEnsure<TObject> {\r\n  /**\r\n   * Rules that have been defined using the fluent API.\r\n   */\r\n  public rules: Rule<TObject, any>[][] = [];\r\n\r\n  constructor(private parsers: Parsers) { }\r\n\r\n  /**\r\n   * Target a property with validation rules.\r\n   * @param property The property to target. Can be the property name or a property accessor\r\n   * function.\r\n   */\r\n  public ensure<TValue>(property: string | number | PropertyAccessor<TObject, TValue>): FluentRules<TObject, any> {\r\n    this.assertInitialized();\r\n    const name = this.parsers.property.parse(property);\r\n    const fluentRules = new FluentRules<TObject, TValue>(\r\n      this,\r\n      this.parsers,\r\n      { name, displayName: null });\r\n    return this.mergeRules(fluentRules, name);\r\n  }\r\n\r\n  /**\r\n   * Targets an object with validation rules.\r\n   */\r\n  public ensureObject(): FluentRules<TObject, any> {\r\n    this.assertInitialized();\r\n    const fluentRules = new FluentRules<TObject, TObject>(\r\n      this, this.parsers, { name: null, displayName: null });\r\n    return this.mergeRules(fluentRules, null);\r\n  }\r\n\r\n  /**\r\n   * Applies the rules to a class or object, making them discoverable by the StandardValidator.\r\n   * @param target A class or object.\r\n   */\r\n  public on(target: any) {\r\n    Rules.set(target, this.rules);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a rule definition to the sequenced ruleset.\r\n   * @internal\r\n   */\r\n  public _addRule(rule: Rule<TObject, any>) {\r\n    while (this.rules.length < rule.sequence + 1) {\r\n      this.rules.push([]);\r\n    }\r\n    this.rules[rule.sequence].push(rule);\r\n  }\r\n\r\n  private assertInitialized() {\r\n    if (this.parsers) {\r\n      return;\r\n    }\r\n    throw new Error(`Did you forget to add \".plugin('aurelia-validation')\" to your main.js?`);\r\n  }\r\n\r\n  private mergeRules(fluentRules: FluentRules<TObject, any>, propertyName: string | number | null) {\r\n    // tslint:disable-next-line:triple-equals | Use loose equality for property keys\r\n    const existingRules = this.rules.find(r => r.length > 0 && r[0].property.name == propertyName);\r\n    if (existingRules) {\r\n      const rule = existingRules[existingRules.length - 1];\r\n      fluentRules.sequence = rule.sequence;\r\n      if (rule.property.displayName !== null) {\r\n        fluentRules = fluentRules.displayName(rule.property.displayName);\r\n      }\r\n    }\r\n    return fluentRules;\r\n  }\r\n}\r\n\r\n/**\r\n * Fluent rule definition API.\r\n */\r\nexport class ValidationRules {\r\n  private static parsers: Parsers;\r\n\r\n  public static initialize(messageParser: ValidationMessageParser, propertyParser: PropertyAccessorParser) {\r\n    this.parsers = {\r\n      message: messageParser,\r\n      property: propertyParser\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Target a property with validation rules.\r\n   * @param property The property to target. Can be the property name or a property accessor function.\r\n   */\r\n  public static ensure<TObject, TValue>(property: string | number | PropertyAccessor<TObject, TValue>) {\r\n    return new FluentEnsure<TObject>(ValidationRules.parsers).ensure(property);\r\n  }\r\n\r\n  /**\r\n   * Targets an object with validation rules.\r\n   */\r\n  public static ensureObject<TObject>() {\r\n    return new FluentEnsure<TObject>(ValidationRules.parsers).ensureObject();\r\n  }\r\n\r\n  /**\r\n   * Defines a custom rule.\r\n   * @param name The name of the custom rule. Also serves as the message key.\r\n   * @param condition The rule function.\r\n   * @param message The message expression\r\n   * @param argsToConfig A function that maps the rule's arguments to a \"config\"\r\n   * object that can be used when evaluating the message expression.\r\n   */\r\n  public static customRule(\r\n    name: string,\r\n    condition: (value: any, object?: any, ...args: any[]) => boolean | Promise<boolean>,\r\n    message: string,\r\n    argsToConfig?: (...args: any[]) => any\r\n  ) {\r\n    validationMessages[name] = message;\r\n    FluentRules.customRules[name] = { condition, argsToConfig };\r\n  }\r\n\r\n  /**\r\n   * Returns rules with the matching tag.\r\n   * @param rules The rules to search.\r\n   * @param tag The tag to search for.\r\n   */\r\n  public static taggedRules(rules: Rule<any, any>[][], tag: string): Rule<any, any>[][] {\r\n    return rules.map(x => x.filter(r => r.tag === tag));\r\n  }\r\n\r\n  /**\r\n   * Returns rules that have no tag.\r\n   * @param rules The rules to search.\r\n   */\r\n  public static untaggedRules(rules: Rule<any, any>[][]): Rule<any, any>[][] {\r\n    return rules.map(x => x.filter(r => r.tag === undefined));\r\n  }\r\n\r\n  /**\r\n   * Removes the rules from a class or object.\r\n   * @param target A class or object.\r\n   */\r\n  public static off(target: any): void {\r\n    Rules.unset(target);\r\n  }\r\n}\r\n\r\nexport interface Parsers {\r\n  message: ValidationMessageParser;\r\n  property: PropertyAccessorParser;\r\n}\r\n","// Exports\r\n\r\nexport * from './config';\r\nexport * from './controller-validate-result';\r\nexport * from './get-target-dom-element';\r\nexport * from './property-info';\r\nexport * from './property-accessor-parser';\r\nexport * from './validate-binding-behavior';\r\nexport * from './validate-event';\r\nexport * from './validate-instruction';\r\nexport * from './validate-result';\r\nexport * from './validate-trigger';\r\nexport * from './validation-controller';\r\nexport * from './validation-controller-factory';\r\nexport * from './validation-errors-custom-attribute';\r\nexport * from './validation-renderer-custom-attribute';\r\nexport * from './validation-renderer';\r\nexport * from './validator';\r\n\r\nexport * from './implementation/rule';\r\nexport * from './implementation/rules';\r\nexport * from './implementation/standard-validator';\r\nexport * from './implementation/validation-messages';\r\nexport * from './implementation/validation-message-parser';\r\nexport * from './implementation/validation-rules';\r\n\r\n// Configuration\r\n\r\nimport { Container } from 'aurelia-dependency-injection';\r\nimport { GlobalValidationConfiguration } from './config';\r\nimport { ValidationMessageParser } from './implementation/validation-message-parser';\r\nimport { PropertyAccessorParser } from './property-accessor-parser';\r\nimport { ValidationRules } from './implementation/validation-rules';\r\nimport {\r\n  ValidateBindingBehavior,\r\n  ValidateManuallyBindingBehavior,\r\n  ValidateOnBlurBindingBehavior,\r\n  ValidateOnChangeBindingBehavior,\r\n  ValidateOnChangeOrBlurBindingBehavior,\r\n  ValidateOnFocusoutBindingBehavior,\r\n  ValidateOnChangeOrFocusoutBindingBehavior\r\n} from './validate-binding-behavior';\r\nimport { ValidationErrorsCustomAttribute } from './validation-errors-custom-attribute';\r\nimport { ValidationRendererCustomAttribute } from './validation-renderer-custom-attribute';\r\n\r\n/**\r\n * Configures the plugin.\r\n */\r\nexport function configure(\r\n  // tslint:disable-next-line:ban-types\r\n  frameworkConfig: { container: Container, globalResources?: (...resources: any[]) => any },\r\n  callback?: (config: GlobalValidationConfiguration) => void\r\n) {\r\n  // the fluent rule definition API needs the parser to translate messages\r\n  // to interpolation expressions.\r\n  const messageParser = frameworkConfig.container.get(ValidationMessageParser);\r\n  const propertyParser = frameworkConfig.container.get(PropertyAccessorParser);\r\n  ValidationRules.initialize(messageParser, propertyParser);\r\n\r\n  // configure...\r\n  const config = new GlobalValidationConfiguration();\r\n  if (callback instanceof Function) {\r\n    callback(config);\r\n  }\r\n  config.apply(frameworkConfig.container);\r\n\r\n  // globalize the behaviors.\r\n  if (frameworkConfig.globalResources) {\r\n    frameworkConfig.globalResources(\r\n      ValidateBindingBehavior,\r\n      ValidateManuallyBindingBehavior,\r\n      ValidateOnBlurBindingBehavior,\r\n      ValidateOnFocusoutBindingBehavior,\r\n      ValidateOnChangeBindingBehavior,\r\n      ValidateOnChangeOrBlurBindingBehavior,\r\n      ValidateOnChangeOrFocusoutBindingBehavior,\r\n      ValidationErrorsCustomAttribute,\r\n      ValidationRendererCustomAttribute);\r\n  }\r\n}\r\n"],"names":["LiteralString","LiteralPrimitive","Binary","Conditional","CallMember","BindingLanguage","LogManager","ViewResources","validateTrigger","DOM","BindingBehavior","ValueConverter","AccessScope","getContextFor","AccessMember","AccessKeyed","Parser","Optional","TaskQueue","bindingBehavior","Lazy","bindable","bindingMode","customAttribute"],"mappings":"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"}